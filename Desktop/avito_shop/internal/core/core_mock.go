// Code generated by mockery v2.52.2. DO NOT EDIT.

package core

import (
	models "avito_shop/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function with given fields: ctx, employee, now
func (_m *MockInterface) Auth(ctx context.Context, employee *models.Employee, now time.Time) (string, error) {
	ret := _m.Called(ctx, employee, now)

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Employee, time.Time) (string, error)); ok {
		return rf(ctx, employee, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Employee, time.Time) string); ok {
		r0 = rf(ctx, employee, now)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Employee, time.Time) error); ok {
		r1 = rf(ctx, employee, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockInterface_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - ctx context.Context
//   - employee *models.Employee
//   - now time.Time
func (_e *MockInterface_Expecter) Auth(ctx interface{}, employee interface{}, now interface{}) *MockInterface_Auth_Call {
	return &MockInterface_Auth_Call{Call: _e.mock.On("Auth", ctx, employee, now)}
}

func (_c *MockInterface_Auth_Call) Run(run func(ctx context.Context, employee *models.Employee, now time.Time)) *MockInterface_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Employee), args[2].(time.Time))
	})
	return _c
}

func (_c *MockInterface_Auth_Call) Return(_a0 string, _a1 error) *MockInterface_Auth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Auth_Call) RunAndReturn(run func(context.Context, *models.Employee, time.Time) (string, error)) *MockInterface_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// BuyItem provides a mock function with given fields: ctx, item, username
func (_m *MockInterface) BuyItem(ctx context.Context, item string, username string) error {
	ret := _m.Called(ctx, item, username)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, item, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_BuyItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyItem'
type MockInterface_BuyItem_Call struct {
	*mock.Call
}

// BuyItem is a helper method to define mock.On call
//   - ctx context.Context
//   - item string
//   - username string
func (_e *MockInterface_Expecter) BuyItem(ctx interface{}, item interface{}, username interface{}) *MockInterface_BuyItem_Call {
	return &MockInterface_BuyItem_Call{Call: _e.mock.On("BuyItem", ctx, item, username)}
}

func (_c *MockInterface_BuyItem_Call) Run(run func(ctx context.Context, item string, username string)) *MockInterface_BuyItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInterface_BuyItem_Call) Return(_a0 error) *MockInterface_BuyItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_BuyItem_Call) RunAndReturn(run func(context.Context, string, string) error) *MockInterface_BuyItem_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, username
func (_m *MockInterface) Info(ctx context.Context, username string) (models.InfoResponse, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 models.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.InfoResponse, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.InfoResponse); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(models.InfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockInterface_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockInterface_Expecter) Info(ctx interface{}, username interface{}) *MockInterface_Info_Call {
	return &MockInterface_Info_Call{Call: _e.mock.On("Info", ctx, username)}
}

func (_c *MockInterface_Info_Call) Run(run func(ctx context.Context, username string)) *MockInterface_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_Info_Call) Return(_a0 models.InfoResponse, _a1 error) *MockInterface_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Info_Call) RunAndReturn(run func(context.Context, string) (models.InfoResponse, error)) *MockInterface_Info_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoin provides a mock function with given fields: ctx, send, username
func (_m *MockInterface) SendCoin(ctx context.Context, send *models.SendCoin, username string) error {
	ret := _m.Called(ctx, send, username)

	if len(ret) == 0 {
		panic("no return value specified for SendCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SendCoin, string) error); ok {
		r0 = rf(ctx, send, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SendCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoin'
type MockInterface_SendCoin_Call struct {
	*mock.Call
}

// SendCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - send *models.SendCoin
//   - username string
func (_e *MockInterface_Expecter) SendCoin(ctx interface{}, send interface{}, username interface{}) *MockInterface_SendCoin_Call {
	return &MockInterface_SendCoin_Call{Call: _e.mock.On("SendCoin", ctx, send, username)}
}

func (_c *MockInterface_SendCoin_Call) Run(run func(ctx context.Context, send *models.SendCoin, username string)) *MockInterface_SendCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.SendCoin), args[2].(string))
	})
	return _c
}

func (_c *MockInterface_SendCoin_Call) Return(_a0 error) *MockInterface_SendCoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SendCoin_Call) RunAndReturn(run func(context.Context, *models.SendCoin, string) error) *MockInterface_SendCoin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
